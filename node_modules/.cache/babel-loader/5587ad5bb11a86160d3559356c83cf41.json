{"ast":null,"code":"var _jsxFileName = \"/Users/vietqnguyen/Desktop/React/16-react-router-practice/src/pages/QuoteDetail.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\nimport Comments from '../components/comments/Comments';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_QUOTES = [{\n  id: 'q1',\n  author: 'Viet',\n  text: 'Learn Frech today'\n}, {\n  id: 'q2',\n  author: 'Nam',\n  text: 'Learn React today'\n}];\n\nconst QuoteDetail = () => {\n  _s();\n\n  const match = useRouteMatch();\n  const params = useParams();\n  const {\n    sendRquest,\n    status,\n    data: loadedQuote,\n    error\n  } = useHttp(getSingleQuote, true);\n  const quote = DUMMY_QUOTES.find(quote => quote.id === params.quoteId);\n\n  if (!quote) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No quote found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(HighlightedQuote, {\n      text: quote.text,\n      author: quote.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${match.path}`,\n      exact: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centered\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn--flat\",\n          to: `${match.url}/comments`,\n          children: \"Load Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${match.path}/comments`,\n      children: /*#__PURE__*/_jsxDEV(Comments, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuoteDetail, \"QwpX8/DCDkQxDFvakAm96+hQUsM=\", false, function () {\n  return [useRouteMatch, useParams, useHttp];\n});\n\n_c = QuoteDetail;\nexport default QuoteDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteDetail\");","map":{"version":3,"sources":["/Users/vietqnguyen/Desktop/React/16-react-router-practice/src/pages/QuoteDetail.js"],"names":["React","Route","useParams","Link","useRouteMatch","Comments","HighlightedQuote","useHttp","getSingleQuote","DUMMY_QUOTES","id","author","text","QuoteDetail","match","params","sendRquest","status","data","loadedQuote","error","quote","find","quoteId","path","url"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,IAA3B,EAAiCC,aAAjC,QAAsD,kBAAtD;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,cAAT,QAA+B,YAA/B;;AAEA,MAAMC,YAAY,GAAG,CACjB;AAACC,EAAAA,EAAE,EAAE,IAAL;AAAWC,EAAAA,MAAM,EAAE,MAAnB;AAA2BC,EAAAA,IAAI,EAAE;AAAjC,CADiB,EAEjB;AAACF,EAAAA,EAAE,EAAE,IAAL;AAAWC,EAAAA,MAAM,EAAE,KAAnB;AAA0BC,EAAAA,IAAI,EAAE;AAAhC,CAFiB,CAArB;;AAKA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAMC,KAAK,GAAGV,aAAa,EAA3B;AACA,QAAMW,MAAM,GAAGb,SAAS,EAAxB;AAEA,QAAM;AAAEc,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,IAAI,EAAEC,WAA5B;AAAyCC,IAAAA;AAAzC,MAAmDb,OAAO,CAACC,cAAD,EAAiB,IAAjB,CAAhE;AACA,QAAMa,KAAK,GAAGZ,YAAY,CAACa,IAAb,CAAkBD,KAAK,IAAIA,KAAK,CAACX,EAAN,KAAaK,MAAM,CAACQ,OAA/C,CAAd;;AACA,MAAG,CAACF,KAAJ,EAAU;AACN,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,4BACI,QAAC,gBAAD;AAAkB,MAAA,IAAI,EAAEA,KAAK,CAACT,IAA9B;AAAoC,MAAA,MAAM,EAAES,KAAK,CAACV;AAAlD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEG,KAAK,CAACU,IAAK,EAA3B;AAA8B,MAAA,KAAK,MAAnC;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACI,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,WAAhB;AAA4B,UAAA,EAAE,EAAG,GAAEV,KAAK,CAACW,GAAI,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ,eAOI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEX,KAAK,CAACU,IAAK,WAA3B;AAAA,6BACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAtBD;;GAAMX,W;UACYT,a,EACCF,S,EAE0CK,O;;;KAJvDM,W;AAwBN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\nimport Comments from '../components/comments/Comments';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\n\nconst DUMMY_QUOTES = [\n    {id: 'q1', author: 'Viet', text: 'Learn Frech today'},\n    {id: 'q2', author: 'Nam', text: 'Learn React today'},\n]\n\nconst QuoteDetail = () => {\n    const match = useRouteMatch();\n    const params = useParams();\n\n    const { sendRquest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true);\n    const quote = DUMMY_QUOTES.find(quote => quote.id === params.quoteId);\n    if(!quote){\n        return <p>No quote found.</p>\n    }\n    return (\n        <React.Fragment>\n            <HighlightedQuote text={quote.text} author={quote.author}/>\n            <Route path={`${match.path}`} exact>\n                <div className='centered'>\n                    <Link className=\"btn--flat\" to={`${match.url}/comments`}>Load Comments</Link>\n                </div>\n            </Route>\n            <Route path={`${match.path}/comments`}>\n                <Comments />\n            </Route>\n        </React.Fragment>\n    )\n};\n\nexport default QuoteDetail;"]},"metadata":{},"sourceType":"module"}